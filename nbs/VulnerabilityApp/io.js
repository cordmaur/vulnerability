// helper functions to fetch and load data 
IO = {
    rawUrl: 'https://raw.githubusercontent.com/cordmaur/Fastai2-Medium/master/docs/DisastersApp',
    apiUrl: 'https://api.github.com/repos/cordmaur/Fastai2-Medium/contents/docs/DisastersApp',
    fetchCitiesFromGit: async function () {
        // const apiUrl = 'https://api.github.com/repos/cordmaur/Fastai2-Medium/contents/docs/DisastersApp';

        try {
            const response = await fetch(IO.apiUrl);
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            const files = await response.json();

            // Filter for HTML files and create their URLs
            const htmlFiles = files
                .filter(file => file.type == 'dir')
            // .map(file => `${baseUrl}${file.name}`);

            // console.log(htmlFiles); // Output the list of HTML file URLs

            return htmlFiles;
        } catch (error) {
            console.error('Error fetching files from GitHub:', error);
        }
    },
    exportAnalysis: function (e) {
        console.log('exporting analysis')

        let data = []
        const checkedCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');

        checkedCheckboxes.forEach(checkbox => {
            const idx = checkbox.value
            // push this row to data
            data.push(originalData[idx])
        })

        console.log(arrayToCSV(data))

        const fileDropdown = document.getElementById('fileDropdown')

        // Download the CSV file
        const csvString = arrayToCSV(data);
        const blob = new Blob([csvString], { type: 'text/csv' });
        // Create a link element
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileDropdown.value + '.csv'
        document.body.appendChild(link);
        link.click();

        // Remove the link from the document
        document.body.removeChild(link);

    }
}

// Function to convert an array of objects to CSV
function arrayToCSV(data) {
    const csvRows = [];
    // Get headers
    const headers = Object.keys(data[0]);
    csvRows.push(headers.join(','));

    // Loop over the rows
    for (const row of data) {
        const values = headers.map(header => {
            const val = row[header];
            // Handle null and undefined values
            return val === null || val === undefined ? '' : val;
        });
        csvRows.push(values.join(','));
    }

    return csvRows.join('\n');
}