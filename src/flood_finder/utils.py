"""Docstring"""
from typing import Tuple
import geopandas as gpd
from shapely.geometry import box


def calc_bounds(
    shp: gpd.GeoDataFrame, percent_buffer: float = 0, fixed_buffer: float = 0.0
) -> tuple:
    """
    Return the total bounds of a shape file with a given buffer
    The buffer can be a fixed distance (in projection units)
    or a percentage of the maximum size
    """

    # get the bounding box of the total shape
    bbox = box(*shp.total_bounds)

    if fixed_buffer != 0:
        bbox = bbox.buffer(fixed_buffer)
    elif percent_buffer != 0:
        xmin, ymin, xmax, ymax = bbox.bounds
        delta_x = xmax - xmin
        delta_y = ymax - ymin
        diag = (delta_x**2 + delta_y**2) ** 0.5
        bbox = bbox.buffer(percent_buffer * diag)

    return bbox.bounds


def calc_aspects_lims(
    shp: gpd.GeoDataFrame,
    aspect: float = 1.0,
    percent_buffer: float = 0,
    fixed_buffer: float = 0.0,
) -> Tuple[Tuple[float, float], Tuple[float, float]]:
    """
    Calculate the limits of a viewport given a GeoDataFrame, a buffer around the bounds (optional)
    and an aspect ratio: aspect_ratio = lim_x/lim_y
    the buffer can be expressed as crs units or percentage
    """

    # first, let's get the bounding box
    xmin, ymin, xmax, ymax = calc_bounds(
        shp=shp, percent_buffer=percent_buffer, fixed_buffer=fixed_buffer
    )

    # calc the sizes in each dimension
    size_x = xmax - xmin
    size_y = ymax - ymin

    actual_aspect = size_x / size_y

    # if actual aspect is smaller, that means width has to be increased
    if actual_aspect < aspect:
        # we have to increase X accordingly
        delta = size_y * aspect - size_x
        xmin -= delta / 2
        xmax += delta / 2

    # if actual aspect is greater, that means height has to be increased
    else:
        # we have to increase Y axis accordingly
        delta = size_x / aspect - size_y
        ymin -= delta / 2
        ymax += delta / 2

    # return the limits
    return (xmin, xmax), (ymin, ymax)
