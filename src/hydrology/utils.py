"""Utility functions"""

import io
import base64
import warnings
from typing import Union
from datetime import datetime

import pandas as pd
import matplotlib.pyplot as plt


def timestamp_date(date: Union[str, datetime, pd.Timestamp]):
    """
    Convert input date to a timestamp without hour component.

    Parameters:
    date : str, datetime.datetime, or pd.Timestamp
        Input date in string, datetime, or timestamp format.

    Returns:
    pd.Timestamp
        Timestamp without hour component.
    """
    if isinstance(date, str):
        date = pd.to_datetime(date)
    elif isinstance(date, pd.Timestamp):
        pass  # No conversion needed for pd.Timestamp
    elif isinstance(date, datetime):
        date = pd.Timestamp(date)
    else:
        raise ValueError(
            "Unsupported input format. Supported formats are str, datetime.datetime, or pd.Timestamp."
        )

    # Remove the hour component
    # date_without_hour = date.replace(hour=0, minute=0, second=0)

    return date


def disable_warnings():
    """Disable some annoying warnings"""
    warnings.filterwarnings("ignore", message=".*buffer.*")
    warnings.filterwarnings("ignore", message=".*database.*")
    warnings.filterwarnings("ignore", message=".*incompletely.*")


def fig2base64(fig: plt.figure, dpi: int = 300) -> str:
    """Convert a Matplotlib figure to a base64 Unicode string
    Args:
        fig (plt.figure): Matplotlib figure to convert
        dpi (int, optional): Dots per inch. Defaults to 300.

    Returns:
        str: The figure encoded as a string.
    """
    # Save the figure as PNG into a BytesIO object
    png_buffer = io.BytesIO()
    fig.savefig(png_buffer, format="png", dpi=dpi, bbox_inches="tight")

    # Convert the binary PNG data to a base64-encoded string
    fig64 = base64.b64encode(png_buffer.getvalue()).decode("utf-8")
    return fig64
